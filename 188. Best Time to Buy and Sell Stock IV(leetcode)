class Solution {
public:
    int maxProfit_Rec(vector<int>& prices, int i, int buy, int limits) {
        // base case
        if (i >= prices.size() || limits == 0)
            return 0;
        // ek case solution
        // if buy is 1 then we can buy the stock other wise we sell the stock
        int profit = 0;
        if (buy) {
            int buyProfit =
                -prices[i] + maxProfit_Rec(prices, i + 1, 0, limits);
            int buyIgnore = maxProfit_Rec(prices, i + 1, 1, limits);
            profit = max(buyProfit, buyIgnore);

        } else {
            int selProfit =
                prices[i] + maxProfit_Rec(prices, i + 1, 1, limits - 1);
            int selIgnore = maxProfit_Rec(prices, i + 1, 0, limits);
            profit = max(selProfit, selIgnore);
        }

        return profit;
    }

    // memoisation
    int maxProfit_Memo(vector<int>& prices, int i, int buy, int limits,
                       vector<vector<vector<int>>>& dp) {
        // base case
        if (i >= prices.size() || limits == 0)
            return 0;

        if (dp[i][buy][limits] != -1)
            return dp[i][buy][limits];
        // ek case solution
        // if buy is 1 then we can buy the stock other wise we sell the stock
        int profit = 0;
        if (buy) {
            int buyProfit =
                -prices[i] + maxProfit_Memo(prices, i + 1, 0, limits, dp);
            int buyIgnore = maxProfit_Memo(prices, i + 1, 1, limits, dp);
            profit = max(buyProfit, buyIgnore);

        } else {
            int selProfit =
                prices[i] + maxProfit_Memo(prices, i + 1, 1, limits - 1, dp);
            int selIgnore = maxProfit_Memo(prices, i + 1, 0, limits, dp);
            profit = max(selProfit, selIgnore);
        }
        dp[i][buy][limits] = profit;

        return dp[i][buy][limits];
    }
     
     /// tabulation 
     int maxProfit_Tabu(vector<int>& prices, vector<vector<vector<int>>>& dp,int k) {
        // base case
        for (int i = prices.size() - 1; i >= 0; i--) {
            for (int buy = 0; buy < 2; buy++) {
                for (int limits = 1; limits <= k; limits++) {
                    int profit = 0;
                    if (buy) {
                        int buyProfit = -prices[i] + dp[i + 1][0][limits];
                        int buyIgnore = dp[i + 1][1][limits];
                        profit = max(buyProfit, buyIgnore);

                    } else {
                        int selProfit = prices[i] + dp[i + 1][1][limits - 1];
                        int selIgnore = dp[i + 1][0][limits];
                        profit = max(selProfit, selIgnore);
                    }
                    dp[i][buy][limits] = profit;
                }
            }
        }
        return dp[0][1][k];
    }

    int maxProfit(int k, vector<int>& prices) {
        // return maxProfit_Rec(prices, 0, true, k);

        //  // memoisation 
        //  vector<vector<vector<int>>>dp(prices.size(),vector<vector<int>>(2,vector<int>(k+1,-1)));
        //  return maxProfit_Memo(prices,0,true,k,dp);

        // tabulation 
         vector<vector<vector<int>>> dp(
            prices.size()+1, vector<vector<int>>(2, vector<int>(k+1, 0)));
        return maxProfit_Tabu(prices, dp,k);
    }
};
