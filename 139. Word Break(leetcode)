class Solution {
public:
    bool check(vector<string>& wordDict, string word) {
        for (auto i : wordDict) {
            if (i == word)
                return true;
        }
        return false;
    }

    bool workbreakFind(string s, vector<string>& wordDict, int start) {
        if (start == s.size())
            return true;

        string word = "";
        bool flag = false;
        for (int i = start; i <= s.size(); i++) {
            word += s[i];
            if (check(wordDict, word)) {
                flag = flag || workbreakFind(s, wordDict, i + 1);
            }
        }
        return flag;
    }

    // memoisation 🚀🚀
    bool workbreakFindMemo(string s, vector<string>& wordDict, int start,
                           vector<int>& dp) {
        if (start == s.size())
            return true;

        if (dp[start] != -1)
            return dp[start];

        string word = "";
        bool flag = false;
        for (int i = start; i <= s.size(); i++) {
            word += s[i];
            if (check(wordDict, word)) {
                flag = flag || workbreakFindMemo(s, wordDict, i + 1, dp);
            }
        }
        dp[start] = flag;
        return dp[start];
    }

    // tabulation 😈😈😈😈❤️❤️
    bool workbreak_Tabulation(string s, vector<string>& wordDict,
                              vector<int>& dp) {

        for (int start = s.size() - 1; start >= 0; start--) {
            string word = "";
            bool flag = false;
            for (int i = start; i <= s.size(); i++) {
                word += s[i];
                if (check(wordDict, word)) {
                    flag = flag || dp[i + 1];
                }
            }
            dp[start] = flag;
        }
        return dp[0];
    }

    bool wordBreak(string s, vector<string>& wordDict) {
        // return workbreakFind(s,wordDict,0);

        // memoisation 🚀🚀🚀
        // vector<int>dp(s.size(),-1);
        // return workbreakFindMemo(s,wordDict,0,dp);

        // tabulation 🚀🚀🚀
        vector<int> dp(s.size()+1, 1);
        return workbreak_Tabulation(s, wordDict, dp);
    }
};
