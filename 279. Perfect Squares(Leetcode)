class Solution {
public:
    // memoisation ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
    int numSquaresHelper(int n, vector<int>& dp) {
        // base
        if (n == 0)
            return 1;
        if (n < 0)
            return 0;

        if (dp[n] != -1)
            return dp[n];

        int ans = INT_MAX;
        int i = 1;
        int end = sqrt(n);
        while (i <= end) {
            int perfectSquare = i * i;
            int numberOfPerfectSquares =
                1 + numSquaresHelper(n - perfectSquare, dp);

            if (numberOfPerfectSquares < ans) {
                ans = numberOfPerfectSquares;
            }
            i++;
        }
        dp[n] = ans;
        return dp[n];
    }

    // tabulationüöÄüöÄüöÄ
    int tabulation(int n) {
        vector<int> dp(n + 1, 0);

        for (int i = 1; i <= n; i++) {
            int ans = INT_MAX;
            int start = 1;
            int end = sqrt(i);
            while (start <= end) {
                int perfectSquare = start * start;
                int numberOfPerfectSquares = 1 + dp[i - perfectSquare];

                if (numberOfPerfectSquares < ans) {
                    ans = numberOfPerfectSquares;
                }
                start++;
            }
            dp[i] = ans;
        }
        return dp[n];
    }

    int numSquares(int n) {
        // vector<int> dp(n + 1, -1);
        // return numSquaresHelper(n, dp) - 1;

        return tabulation(n) ;

    }
};
