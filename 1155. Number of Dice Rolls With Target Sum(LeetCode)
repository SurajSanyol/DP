class Solution {
public:
    long long int mod = 1e9 + 7;
    int getWays(int n, int k, int target) {
        // base case
        if (n < 0)
            return 0;
        if (n == 0 && target == 0)
            return 1;
        if (n == 0 && target != 0)
            return 0;
        if (n != 0 && target == 0)
            return 0;

        int ans = 0;
        for (int i = 1; i <= k; i++) {
            ans += getWays(n - 1, k, target - i);
        }
        return ans;
    }

    long long int memo(int n, int k, int target,
                       vector<vector<long long int>>& dp) {
        // base case
        if (n < 0)
            return 0;
        if (n == 0 && target == 0)
            return 1;
        if (n == 0 && target != 0)
            return 0;
        if (n != 0 && target == 0)
            return 0;

        if (dp[n][target] != -1) {
            return dp[n][target];
        }

        long long int ans = 0;
        for (int i = 1; i <= k; i++) {
            if (target - i >= 0)
                ans = (ans % mod + memo(n - 1, k, target - i, dp) % mod) % mod;
        }
        dp[n][target] = ans;
        return dp[n][target];
    }

    int numRollsToTarget(int n, int k, int target) {
        // return getWays(n,k,target);

        vector<vector<long long int>> dp(n + 1,
                                         vector<long long int>(target + 1, -1));
        return memo(n, k, target, dp);
    }
};
