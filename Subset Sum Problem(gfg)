//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
//User function template for C++

class Solution{   
public:
    
    // bool isSubsetPresent(vector<int>&arr, int sum,int index){
    //       // base case
    //       if(index==0){
    //           if(sum==0)return true;
    //           else{
    //               return false;
    //           }
    //       }
           
    //       // recursive code
    //       bool include=0;
    //       if(sum-arr[index]>=0){
               
    //          include = isSubsetPresent(arr,sum-arr[index],index-1);
    //       }
           
    //       bool exclude = isSubsetPresent(arr,sum,index-1);
           
    //       return include || exclude;
           
    // }
    
    
    // memoization
    
        bool isSubsetPresent(vector<int>&arr, int sum,int index,vector<vector<int>>&dp){
           // base case
           if(sum==0)return true;
           if(index==0){
               return (sum==arr[0]);
           }
           
           if(dp[index][sum]!=-1)return dp[index][sum];
           
           // recursive code
           bool include=false;
           if(sum-arr[index]>=0){
               
             include = isSubsetPresent(arr,sum-arr[index],index-1,dp);
           }
           
           bool exclude = isSubsetPresent(arr,sum,index-1,dp);
           
           dp[index][sum]= include || exclude;
           
           return dp[index][sum];
           
    }
    
    // tabulation method
   
    

   
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        int n= arr.size();
        // return isSubsetPresent(arr,sum,n-1);
        
        // memoization
        vector<vector<int>>dp(n+1,vector<int>(sum+1,-1));
        return  isSubsetPresent(arr,sum,n-1,dp);
    }
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N, sum;
        cin >> N;
        vector<int> arr(N);
        for(int i = 0; i < N; i++){
            cin >> arr[i];
        }
        cin >> sum;
        
        Solution ob;
        cout << ob.isSubsetSum(arr, sum) << endl;
    }
    return 0; 
} 

// } Driver Code Ends
