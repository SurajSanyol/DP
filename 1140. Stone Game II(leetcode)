class Solution {
public:
     
     int solve(vector<int>&piles,int i , int M , int alice){
         if(i==piles.size()) return 0;

         int ans = alice ? INT_MIN:INT_MAX;
         int total = 0;

         for(int x= 1;x<=2*M;x++){
            if(i+x-1>=piles.size()) break;
            total+=piles[i+x-1];

            if(alice){
                ans = max(ans , total+ solve(piles,i+x,max(x,M),!alice));
            }
            else{
                 ans = min(ans , solve(piles,i+x,max(x,M),!alice));
            }
         }
         return ans;
     }

     // memoisation ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€

      int memo(vector<int>&piles,int i , int M , int alice, vector<vector<vector<int>>>&dp){
         if(i==piles.size()) return 0;

         if( dp[i][M][alice]!=-1) return  dp[i][M][alice];

         int ans = alice ? INT_MIN:INT_MAX;
         int total = 0;

         for(int x= 1;x<=2*M;x++){
            if(i+x-1>=piles.size()) break;
            total+=piles[i+x-1];

            if(alice){
                ans = max(ans , total+ memo(piles,i+x,max(x,M),!alice,dp));
            }
            else{
                 ans = min(ans , memo(piles,i+x,max(x,M),!alice,dp));
            }
         }
         return dp[i][M][alice]=ans;
     }


    int stoneGameII(vector<int>& piles) {
        // return solve(piles, 0 , 1, true);


        // memoisation ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€
         vector<vector<vector<int>>>dp(piles.size()+1,vector<vector<int>>(piles.size()+1,vector<int>(2 ,-1)));
         return memo(piles, 0 , 1, true,dp);
    }
};
