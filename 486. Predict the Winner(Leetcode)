class Solution {
public:
      
      int predictWinner(vector<int>& nums,int start , int end){

        if(start==end){
            return nums[start];
        }
        
        //  include 
         int diffStart = nums[start] - predictWinner(nums,start+1,end);
         int diffEnd = nums[end] - predictWinner(nums,start,end-1);

         return  max(diffStart,diffEnd);


      }
     

    //  memoisation 
    int predictWinnerMemo(vector<int>& nums,int start , int end,vector<vector<int>>&dp){

        if(start==end){
            return nums[start];
        }
        if(dp[start][end]!=-1) return dp[start][end];
        //  include 
         int diffStart = nums[start] - predictWinnerMemo(nums,start+1,end,dp);
         int diffEnd = nums[end] - predictWinnerMemo(nums,start,end-1,dp);

          dp[start][end] = max(diffStart,diffEnd);
          return dp[start][end];

      }

      

    bool predictTheWinner(vector<int>& nums) {
        // return predictWinner(nums,0,nums.size()-1)>=0;
         
         vector<vector<int>>dp(nums.size(),vector<int>(nums.size(),0));
         return predictWinnerMemo(nums,0,nums.size()-1,dp)>=0;
    }
};
