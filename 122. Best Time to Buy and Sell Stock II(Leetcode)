class Solution {
public:
    int maxProfit_Rec(vector<int>& prices, int i, int buy) {
        // base case
        if (i >= prices.size())
            return 0;
        // ek case solution
        // if buy is 1 then we can buy the stock other wise we sell the stock
        int profit = 0;
        if (buy) {
            int buyProfit = -prices[i] + maxProfit_Rec(prices, i + 1, 0);
            int buyIgnore = maxProfit_Rec(prices, i + 1, 1);
            profit = max(buyProfit, buyIgnore);

        } else {
            int selProfit = prices[i] + maxProfit_Rec(prices, i + 1, 1);
            int selIgnore = maxProfit_Rec(prices, i + 1, 0);
            profit = max(selProfit, selIgnore);
        }

        return profit;
    }

    //   üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄÔøΩ
    int maxProfit_Memoisation(vector<int>& prices, int i, int buy,
                              vector<vector<int>>& dp) {
        // base case
        if (i >= prices.size())
            return 0;
        // ek case solution
        // if buy is 1 then we can buy the stock other wise we sell the stock
        if (dp[i][buy] != -1)
            return dp[i][buy];
        int profit = 0;
        if (buy) {
            int buyProfit =
                -prices[i] + maxProfit_Memoisation(prices, i + 1, 0, dp);
            int buyIgnore = maxProfit_Memoisation(prices, i + 1, 1, dp);
            profit = max(buyProfit, buyIgnore);

        } else {
            int selProfit =
                prices[i] + maxProfit_Memoisation(prices, i + 1, 1, dp);
            int selIgnore = maxProfit_Memoisation(prices, i + 1, 0, dp);
            profit = max(selProfit, selIgnore);
        }
        dp[i][buy] = profit;
        return dp[i][buy];
    }

    // tabulation methods ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
    int Tabulation(vector<int>& prices) {
        vector<vector<int>> dp(prices.size()+1, vector<int>(2, 0));

        int n = prices.size();

        for (int i = n - 1; i >= 0; i--) {
            for (int buy = 0; buy < 2; buy++) {

                int profit = 0;
                if (buy) {
                    int buyProfit = -prices[i] +
                                    dp[i + 1][0];
                    int buyIgnore = dp[ i + 1][1];
                    profit = max(buyProfit, buyIgnore);

                } else {
                    int sellProfit =
                        prices[i] + dp[ i + 1][1];
                    int sellIgnore = dp[i + 1][0];
                    profit = max(sellProfit, sellIgnore);
                }
                dp[i][buy] = profit;
                
            }
        }
        return dp[0][1];
    }

    int maxProfit(vector<int>& prices) {

        // return maxProfit_Rec(prices,0,true);

        // vector<vector<int>> dp(prices.size(), vector<int>(2, -1));
        // return maxProfit_Memoisation(prices, 0, true, dp);

        // tabulation
         return Tabulation(prices);
    }
};
