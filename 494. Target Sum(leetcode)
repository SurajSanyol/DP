class Solution {
public:
     int solve(vector<int>& nums, int target,int i){
          if(i==nums.size()) return target==0 ?1:0;

          // recursive call
            int way1 = solve(nums,target-nums[i],i+1);
            int way2 = solve(nums,target+nums[i],i+1);

            return way1+way2;
     }
    
     // memoisation 🚀🚀🚀🚀🚀
        int memo(vector<int>& nums, int target,int i,map<pair<int,int>,int>&dp){
          if(i==nums.size()) return target==0 ?1:0;

             if(dp.find({i,target})!=dp.end()) return dp[{i,target}];

          // recursive call
            int way1 = memo(nums,target-nums[i],i+1,dp);
            int way2 = memo(nums,target+nums[i],i+1,dp);

            dp[{i,target}] = way1+way2;
            return  dp[{i,target}];
     }
      
      // tabulation  🙏🙏🙏🙏🙏🙏🙏🙏🙏🙏🙏
         int memo(vector<int>& nums, int target,int i,map<pair<int,int>,int>&dp){
          if(i==nums.size()) return target==0 ?1:0;

             if(dp.find({i,target})!=dp.end()) return dp[{i,target}];

          // recursive call
            int way1 = memo(nums,target-nums[i],i+1,dp);
            int way2 = memo(nums,target+nums[i],i+1,dp);

            dp[{i,target}] = way1+way2;
            return  dp[{i,target}];
     }


    int findTargetSumWays(vector<int>& nums, int target) {
        // return solve(nums,target,0);
        
        // memoisation 🚀🚀🚀🚀🚀🚀🚀🚀
        // vector<vector<int>>dp(nums.size()+1,vector<int>(nums.size()+1,-1));
        map<pair<int,int>,int>dp;

         return memo(nums,target,0,dp);
    }
};
