class Solution {
public:
    

    int optimalAns(vector<vector<int>>& nums){
          // base case 
           if(nums.size()==0) return 0;

           vector<int>ans;
           ans.push_back(nums[0][1]);

           for(int i =1;i<nums.size();i++){
               if(nums[i][1]>ans.back()){
                   // include
                    ans.push_back(nums[i][1]);
               }
               else{
                    // find the just greater element in ans array from nums[i] element
                     int index = lower_bound(ans.begin(),ans.end(),nums[i][1])-ans.begin();
                     ans[index]=nums[i][1];
               }
           }
           return ans.size();
     }


    int maxEnvelopes(vector<vector<int>>& envelopes) {

        sort(envelopes.begin(), envelopes.end(),
             [](const vector<int>& a, const vector<int>& b) {
                 if (a[0] == b[0]) {
                     return a[1] > b[1];
                 }
                 return a[0] < b[0];
             });

       
        return optimalAns(envelopes);

        
    }
};
