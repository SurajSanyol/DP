class Solution {
public:
    // int solveUsingRecursion(vector<int>&nums,int n){
    //     // base case 
    //     if(n<0)return 0;

    //     if(n==0)return nums[0];

    //     // include
    //     int include = solveUsingRecursion(nums,n-2)+nums[n];

    //     //exclude
    //     int exclude = solveUsingRecursion(nums,n-1)+ 0;

    //     return max(include,exclude);
    // }

    // top down approach😁😁😁😁😁😁
    // int solveMem(vector<int>&nums,int n,vector<int>&dp){
    //     // base case 
    //     if(n<0)return 0;

    //     if(n==0)return nums[0];

    //     if(dp[n]!=-1){
    //         return dp[n];
    //     }

    //     // include
    //     int include = solveMem(nums,n-2,dp)+nums[n];

    //     //exclude
    //     int exclude = solveMem(nums,n-1,dp)+ 0;

    //     dp[n]= max(include,exclude);
    //     return dp[n];
    // }


    // tabulation method 🚀🚀🚀🚀🚀🚀🚀🚀🚀

    int solveUsinfTabulation(vector<int>&nums,int n){
         vector<int>dp(n+1,0);

         dp[0]=nums[0];

         for(int i=1;i<=n;i++){
            int temp =0;
            if(i-2>=0)
            {
                temp = dp[i-2];
            }

            int include = temp +nums[i];

            int exclude = dp[i-1]+0;

            dp[i] = max(include,exclude);
         }
         return dp[n];
    }

    // space optimization ⭐⭐⭐⭐⭐⭐⭐⭐
    int solveUsingSpaceoptimization(vector<int>&nums,int n){
         int prev2=0;
         int prev1=nums[0];

         int curr = 0;

         for(int i=1;i<=n;i++){
            int temp =0;
            if(i-2>=0)
            {
                temp = prev2;
            }

            int include = temp +nums[i];

            int exclude = prev1+0;

            curr = max(include,exclude);
            prev2=prev1;
            prev1=curr;
         }
         return prev1;
    }

    int rob(vector<int>& nums) {
        
        // int n = nums.size()-1;
        // return solveUsingRecursion(nums,n);

       // top down approach 😁😁😁😁😁😁😁
        // int n = nums.size()-1;
        // vector<int>dp(n+1,-1);
        // return solveMem(nums,n,dp);


        // bottom up approach(tabulation method) 🚀🚀🚀🚀🚀

        //  int n = nums.size()-1;
        // return solveUsinfTabulation(nums,n);
         
         // space optimization

         int n = nums.size()-1;
         return solveUsingSpaceoptimization(nums,n);
    }
};
